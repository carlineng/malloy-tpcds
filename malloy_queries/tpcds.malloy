// Dimensions
source: call_center is table('duckdb:../data/call_center.parquet') {
  primary_key: cc_call_center_sk
}

source: catalog_page is table('duckdb:../data/catalog_page.parquet') {
  primary_key: cp_catalog_page_sk
}

source: customer_address is table('duckdb:../data/customer_address.parquet') {
  primary_key: ca_address_sk
}

source: customer_demographics is table('duckdb:../data/customer_demographics.parquet') {
  primary_key: cd_demo_sk
}

source: date_dim is table('duckdb:../data/date_dim.parquet') {
  primary_key: d_date_sk
}

source: income_band is table('duckdb:../data/income_band.parquet') {
  primary_key: ib_income_band_sk
}

source: household_demographics is table('duckdb:../data/household_demographics.parquet') {
  primary_key: hd_demo_sk
  join_one: income_band with hd_income_band_sk
}

source: customer is table('duckdb:../data/customer.parquet') {
  primary_key: c_customer_sk
  join_one: customer_address with c_current_addr_sk
  join_one: customer_demographics with c_current_cdemo_sk 
  join_one: first_sale_date is date_dim with c_first_sales_date_sk
  join_one: first_shipto_date is date_dim with c_first_shipto_date_sk
  join_one: household_demographics with c_current_hdemo_sk

  dimension:
    ca_zip is substr(customer_address.ca_zip, 1, 5)
}

source: item is table('duckdb:../data/item.parquet') {
  primary_key: i_item_sk
}

source: promotion is table('duckdb:../data/promotion.parquet') {
  primary_key: p_promo_sk
}

source: reason is table('duckdb:../data/reason.parquet') {
  primary_key: r_reason_sk
}

source: ship_mode is table('duckdb:../data/ship_mode.parquet') {
  primary_key: sm_ship_mode_sk
}

source: store is table('duckdb:../data/store.parquet') {
  primary_key: s_store_sk
}

source: time_dim is table('duckdb:../data/time_dim.parquet') {
  primary_key: t_time_sk
}

source: warehouse is table('duckdb:../data/warehouse.parquet') {
  primary_key: w_warehouse_sk
}

source: web_site is table('duckdb:../data/web_site.parquet') {
  primary_key: web_site_sk
}

source: web_page is table('duckdb:../data/web_page.parquet') {
  primary_key: wp_web_page_sk
}

// Facts

source: inventory is table('duckdb:../data/inventory.parquet') {
  join_one: date_dim with inv_date_sk
  join_one: item with inv_item_sk
  join_one: warehouse with inv_warehouse_sk
}

source: store_returns is table('duckdb:../data/store_returns.parquet') {
  join_one: date_dim with sr_returned_date_sk
  join_one: store with sr_store_sk
  join_one: customer with sr_customer_sk
  join_one: reason with sr_reason_sk

  dimension: channel_category is 'store channel'
  dimension: channel_id is concat('store', store.s_store_id)

  measure: total_returns is sum(sr_return_amt)
  measure: avg_returns is avg(sr_return_amt)
  measure: total_loss is sum(sr_net_loss)

  query: projection is {
    project:
      channel_category
      channel_id
      customer_sk is sr_customer_sk
      order_number is sr_ticket_number
      item_sk is sr_item_sk
      returned_date_sk is sr_returned_date_sk
      return_quantity is sr_return_quantity
      return_amt is sr_return_amt
      net_loss is sr_net_loss
  }
}

source: store_sales is table('duckdb:../data/store_sales.parquet') {
  join_one: date_dim with ss_sold_date_sk
  join_one: time_dim with ss_sold_time_sk
  join_one: store with ss_store_sk
  join_one: customer with ss_customer_sk
  join_one: item with ss_item_sk
  join_one: promotion with ss_promo_sk
  join_one: household_demographics with ss_hdemo_sk
  join_one: customer_demographics with ss_cdemo_sk
  join_one: customer_address with ss_addr_sk
  join_one: store_returns
    on ss_customer_sk = store_returns.sr_customer_sk
    and ss_item_sk = store_returns.sr_item_sk
    and ss_ticket_number = store_returns.sr_ticket_number

  dimension: channel_category is 'store channel'
  dimension: channel_id is concat('store', store.s_store_id)

  measure: total_ext_sales is sum(ss_ext_sales_price)
  measure: total_profit is sum(ss_net_profit)

  query: projection is {
    project:
      channel_category
      channel_id
      store_sk is channel_category ?
        pick ss_store_sk when 'store channel'
        else null
      warehouse_sk is channel_category ?
        pick -1 when 'catalog channel' | 'web channel'
        else null 
      ship_mode_sk is channel_category ?
        pick -1 when 'catalog channel' | 'web channel'
        else null
      catalog_page_sk is channel_category ?
        pick -1 when 'catalog channel'
        else null
      web_site_sk is channel_category ?
        pick -1 when 'web channel'
        else null
      sold_date_sk is ss_sold_date_sk
      sold_time_sk is ss_sold_time_sk
      item_sk is ss_item_sk
      order_number is ss_ticket_number
      customer_sk is ss_customer_sk 
      ship_customer_sk is channel_category ?
        pick -1 when 'catalog channel' | 'web channel'
        else null 
      addr_sk is ss_addr_sk
      ship_addr_sk is channel_category ?
        pick -1 when 'catalog channel' | 'web channel'
        else null 
      cdemo_sk is ss_cdemo_sk
      promo_sk is ss_promo_sk
      quantity is ss_quantity
      ext_sales_price is ss_ext_sales_price
      wholesale_cost is ss_wholesale_cost
      list_price is ss_list_price
      sales_price is ss_sales_price
      ext_discount_amt is ss_ext_discount_amt
      ext_wholesale_cost is ss_ext_wholesale_cost
      ext_list_price is ss_ext_list_price
      ext_tax is ss_ext_tax
      coupon_amt is ss_coupon_amt
      net_paid is ss_net_paid
      net_paid_inc_tax is ss_net_paid_inc_tax
      net_profit is ss_net_profit
  }

}

source: catalog_returns is table('duckdb:../data/catalog_returns.parquet') {
  join_one: date_dim with cr_returned_date_sk
  join_one: catalog_page with cr_catalog_page_sk
  join_one: customer with cr_refunded_customer_sk
  join_one: returning_customer is customer with cr_returning_customer_sk
  join_one: return_addr is customer_address with cr_returning_addr_sk
  join_one: call_center with cr_call_center_sk

  dimension: channel_category is 'catalog channel'
  dimension: channel_id is concat('catalog_page', catalog_page.cp_catalog_page_id)

  measure: total_returns is sum(cr_return_amount)
  measure: avg_returns is avg(cr_return_amount)
  measure: total_loss is sum(cr_net_loss)

  query: projection is {
    project:
      channel_category
      channel_id
      customer_sk is cr_refunded_customer_sk
      order_number is cr_order_number
      item_sk is cr_item_sk
      returned_date_sk is cr_returned_date_sk
      return_quantity is cr_return_quantity
      return_amt is cr_return_amount
      net_loss is cr_net_loss
  }
}

source: catalog_sales is table('duckdb:../data/catalog_sales.parquet') {
  join_one: date_dim with cs_sold_date_sk
  join_one: catalog_page with cs_catalog_page_sk
  join_one: customer with cs_bill_customer_sk
  join_one: ship_address is customer_address with cs_ship_addr_sk
  join_one: ship_date is date_dim with cs_ship_date_sk
  join_one: call_center with cs_call_center_sk
  join_one: catalog_returns 
    on cs_order_number = catalog_returns.cr_order_number 
    and cs_item_sk = catalog_returns.cr_item_sk
  join_one: customer_demographics with cs_bill_cdemo_sk
  join_one: household_demographics with cs_bill_hdemo_sk
  join_one: item with cs_item_sk
  join_one: warehouse with cs_warehouse_sk
  join_one: promotion with cs_promo_sk
  join_one: inventory on cs_item_sk = inventory.inv_item_sk
  join_one: ship_mode with cs_ship_mode_sk

  dimension: channel_category is 'catalog channel'
  dimension: channel_id is concat('catalog_page', catalog_page.cp_catalog_page_id)

  measure: total_ext_sales is sum(cs_ext_sales_price)
  measure: total_profit is sum(cs_net_profit)

  query: projection is {
    project:
      channel_category
      channel_id
      store_sk is channel_category ?
        pick '' when 'store channel'
        else null
      warehouse_sk is channel_category ?
        pick cs_warehouse_sk when 'catalog channel' | 'web channel'
        else -1
      ship_mode_sk is channel_category ?
        pick cs_ship_mode_sk when 'catalog channel' | 'web channel'
        else null
      catalog_page_sk is channel_category ?
        pick cs_catalog_page_sk when 'catalog channel'
        else null
      web_site_sk is channel_category ?
        pick -1 when 'web channel'
        else null
      sold_date_sk is cs_sold_date_sk
      sold_time_sk is cs_sold_time_sk
      item_sk is cs_item_sk
      order_number is cs_order_number
      customer_sk is cs_bill_customer_sk 
      ship_customer_sk is cs_ship_customer_sk
      addr_sk is cs_bill_addr_sk
      ship_addr_sk is cs_ship_addr_sk
      cdemo_sk is cs_bill_cdemo_sk
      promo_sk is cs_promo_sk
      quantity is cs_quantity
      ext_sales_price is cs_ext_sales_price
      wholesale_cost is cs_wholesale_cost
      list_price is cs_list_price
      sales_price is cs_sales_price
      ext_discount_amt is cs_ext_discount_amt
      ext_wholesale_cost is cs_ext_wholesale_cost
      ext_list_price is cs_ext_list_price
      ext_tax is cs_ext_tax
      coupon_amt is cs_coupon_amt
      net_paid is cs_net_paid
      net_paid_inc_tax is cs_net_paid_inc_tax
      net_profit is cs_net_profit
  }
}

// TODO: take a look at Query 5 -- most likely broke it by updating `channel_id`
source: web_returns is table('duckdb:../data/web_returns.parquet') {
  join_one: date_dim with wr_returned_date_sk
  join_one: customer with wr_refunded_customer_sk
  join_one: returning_customer is customer with wr_returning_customer_sk
  join_one: returning_addr is customer_address with wr_returning_addr_sk
  join_one: refunded_addr is customer_address with wr_refunded_addr_sk
  join_one: reason with wr_reason_sk
  join_one: web_page with wr_web_page_sk
  join_one: refunded_cdemo is customer_demographics
    on wr_refunded_cdemo_sk = refunded_cdemo.cd_demo_sk
  join_one: returning_cdemo is customer_demographics
    on wr_returning_cdemo_sk = returning_cdemo.cd_demo_sk

  measure: total_returns is sum(wr_return_amt)
  measure: total_loss is sum(wr_net_loss)
  measure: avg_returns is avg(wr_return_amt)

  dimension: channel_category is 'web channel'
  dimension: channel_id is concat('web_site', web_page.wp_web_page_id)

  query: projection is {
    project:
      channel_category
      channel_id
      customer_sk is wr_refunded_customer_sk
      order_number is wr_order_number
      item_sk is wr_item_sk
      returned_date_sk is wr_returned_date_sk
      return_quantity is wr_return_quantity
      return_amt is wr_return_amt
      net_loss is wr_net_loss
  }
}

source: web_sales is table('duckdb:../data/web_sales.parquet') {
  join_one: date_dim with ws_sold_date_sk
  join_one: time_dim with ws_sold_time_sk
  join_one: ship_date is date_dim with ws_ship_date_sk
  join_one: customer with ws_bill_customer_sk
  join_one: web_site with ws_web_site_sk
  join_one: web_page with ws_web_page_sk
  join_one: item with ws_item_sk
  join_one: warehouse with ws_warehouse_sk
  join_one: ship_mode with ws_ship_mode_sk
  join_one: web_returns 
    on ws_item_sk = web_returns.wr_item_sk 
    and ws_order_number = web_returns.wr_order_number
  join_one: ship_demo is household_demographics with ws_ship_hdemo_sk
  join_one: ship_addr is customer_address with ws_ship_addr_sk

  dimension: channel_category is 'web channel'
  dimension: channel_id is concat('web_site', web_site.web_site_id)

  measure: total_ext_sales is sum(ws_ext_sales_price)
  measure: total_profit is sum(ws_net_profit)

  query: projection is {
    project:
      channel_category
      channel_id
      store_sk is channel_category ?
        pick '' when 'store channel'
        else null
      warehouse_sk is channel_category ?
        pick ws_warehouse_sk when 'catalog channel' | 'web channel'
        else -1
      ship_mode_sk is channel_category ?
        pick ws_ship_mode_sk when 'catalog channel' | 'web channel'
        else null
      catalog_page_sk is channel_category ?
        pick -1 when 'catalog channel'
        else null
      web_site_sk is channel_category ?
        pick ws_web_site_sk when 'web channel'
        else null
      sold_date_sk is ws_sold_date_sk
      sold_time_sk is ws_sold_time_sk
      item_sk is ws_item_sk
      order_number is ws_order_number
      customer_sk is ws_bill_customer_sk 
      ship_customer_sk is ws_ship_customer_sk
      addr_sk is ws_bill_addr_sk
      ship_addr_sk is ws_ship_addr_sk
      cdemo_sk is ws_bill_cdemo_sk
      promo_sk is ws_promo_sk
      quantity is ws_quantity
      ext_sales_price is ws_ext_sales_price
      wholesale_cost is ws_wholesale_cost
      list_price is ws_list_price
      sales_price is ws_sales_price
      ext_discount_amt is ws_ext_discount_amt
      ext_wholesale_cost is ws_ext_wholesale_cost
      ext_list_price is ws_ext_list_price
      ext_tax is ws_ext_tax
      coupon_amt is ws_coupon_amt
      net_paid is ws_net_paid
      net_paid_inc_tax is ws_net_paid_inc_tax
      net_profit is ws_net_profit
  }
}

// TODO: why do I need to add `catalog_page_sk` to the projection list?
sql: all_sales_sql is {
  select: """
  SELECT *, catalog_page_sk FROM (%{ web_sales -> projection }%)
  UNION ALL
  SELECT *, catalog_page_sk FROM (%{ catalog_sales -> projection }%)
  UNION ALL
  SELECT *, catalog_page_sk FROM (%{ store_sales -> projection }%)
  """
  connection: "duckdb"
}

sql: all_returns_sql is {
  select: """
  SELECT * FROM (%{ web_returns -> projection }%)
  UNION ALL
  SELECT * FROM (%{ catalog_returns -> projection }%)
  UNION ALL
  SELECT * FROM (%{ store_returns -> projection }%)
  """
  connection: "duckdb"
}

source: all_returns is from_sql(all_returns_sql) {
  join_one: date_dim with returned_date_sk
  join_one: customer with customer_sk
  join_one: item with item_sk

  measure: total_returns is sum(return_amt)
  measure: total_loss is sum(net_loss)

  query: daily_profit_loss is {
    group_by:
      channel_category
      channel_id
      date_dim.d_date

    aggregate:
      sales is sum(0)
      total_profit is sum(0)
      return_amt is total_returns
      net_loss is total_loss
  }
}

source: all_sales is from_sql(all_sales_sql) {
  join_one: date_dim with sold_date_sk
  join_one: customer_demographics with cdemo_sk
  join_one: customer with customer_sk
  join_one: item with item_sk
  join_one: promotion with promo_sk
  join_one: customer_address with addr_sk
  join_one: time_dim with sold_time_sk
  join_one: all_returns
    on order_number = all_returns.order_number
    and item_sk = all_returns.item_sk
  join_one: store
    on channel_category = 'store channel'
    and store_sk = store.s_store_sk
  join_one: warehouse
    on (channel_category ? 'web channel' | 'catalog channel')
    and warehouse_sk = warehouse.w_warehouse_sk
  join_one: ship_mode
    on (channel_category ? 'web channel' | 'catalog channel')
    and ship_mode_sk = ship_mode.sm_ship_mode_sk
  join_one: catalog_page
    on (channel_category = 'catalog channel')
    and catalog_page_sk = catalog_page.cp_catalog_page_sk
  join_one: web_site
    on (channel_category = 'web channel')
    and web_site_sk = web_site.web_site_sk

  measure: total_sales is sum((ext_list_price - ext_wholesale_cost - ext_discount_amt + ext_sales_price) / 2)
  measure: total_ext_sales_price is sum(ext_sales_price)
  measure: total_profit is sum(net_profit)
  measure: total_list_minus_discount is sum(ext_list_price - ext_discount_amt)
  measure: avg_quantity is avg(quantity)
  measure: avg_list_price is avg(list_price)
  measure: avg_coupon_amt is avg(coupon_amt)
  measure: avg_sales_price is avg(sales_price)

  measure: count_store_sales is count(*) { where: channel_category = 'store channel' }
  measure: count_web_sales is count(*) { where: channel_category = 'web channel' }
  measure: count_catalog_sales is count(*) { where: channel_category = 'catalog channel' }

  query: daily_profit_loss is {
    group_by:
      channel_category
      channel_id
      date_dim.d_date

    aggregate:
      sales is total_ext_sales_price
      total_profit
      return_amt is sum(0)
      net_loss is sum(0)
  }

  query: stats_by_item is {
    group_by:
      item.i_item_id
    
    aggregate:
      avg_quantity
      avg_list_price
      avg_coupon_amt
      avg_sales_price

    where:
      customer_demographics.cd_gender = 'M'
      and customer_demographics.cd_marital_status = 'S'
      and customer_demographics.cd_education_status = 'College'
      and (promotion.p_channel_email = 'N' or promotion.p_channel_event = 'N')
      and date_dim.d_year = 2000

    order_by:
      i_item_id

    limit: 100
  }
}

